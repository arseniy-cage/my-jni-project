name: Build JNI Library with NDK r16b

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest # Используем Ubuntu, так как будем скачивать Linux-версию NDK

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download and Extract Android NDK r16b
      run: |
        NDK_URL="https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip"
        NDK_ROOT_FOLDER="android-ndk-r16b"
        NDK_DIR="$HOME/$NDK_ROOT_FOLDER"

        echo "Downloading NDK from $NDK_URL"
        curl -L "$NDK_URL" -o ndk.zip

        echo "Unzipping NDK to $HOME"
        unzip -q ndk.zip -d "$HOME"

        echo "Adding NDK to PATH and setting NDK_HOME"
        echo "$NDK_DIR" >> $GITHUB_PATH
        echo "NDK_HOME=$NDK_DIR" >> $GITHUB_ENV

        echo "Verifying ndk-build presence:"
        which ndk-build || echo "ndk-build not found in PATH yet (this is normal after adding to GITHUB_PATH)"
        # Проверяем напрямую по полному пути
        if [ -f "$NDK_DIR/ndk-build" ]; then
          echo "ndk-build found at $NDK_DIR/ndk-build"
          "$NDK_DIR/ndk-build" --version || true # Попробуем вызвать, если поддерживается
        else
          echo "Error: ndk-build not found at $NDK_DIR/ndk-build"
          exit 1
        fi

    - name: Set up Java (required by ndk-build in some contexts)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '8' # Android NDK r16b лучше всего работает с Java 8

    - name: Build JNI with ndk-build
      run: |
        # !ВАЖНО!: Замените 'your_jni_project_folder' на реальный путь к вашей папке с JNI-исходниками
        # Например, если ваш Android.mk находится в 'app/src/main/jni', то это будет 'app/src/main'
        cd your_jni_project_folder

        # Если вам нужно указать конкретные ABI, используйте APP_ABI
        # Например, для сборки только под armeabi-v7a:
        ndk-build APP_ABI="armeabi-v7a" V=1

    - name: Verify output file existence
      run: |
        # !ВАЖНО!: Замените 'your_jni_project_folder' на реальный путь
        OUTPUT_FILE="your_jni_project_folder/libs/armeabi-v7a/libsampvoice.so"
        if [ -f "$OUTPUT_FILE" ]; then
          echo "File $OUTPUT_FILE found successfully!"
          ls -lh "$OUTPUT_FILE"
        else
          echo "Error: File $OUTPUT_FILE not found!"
          # Показать содержимое папки libs для отладки
          ls -R your_jni_project_folder/libs || true
          exit 1
        fi

    - name: Upload compiled .so file
      uses: actions/upload-artifact@v4
      with:
        name: libsampvoice-so
        # !ВАЖНО!: Замените 'your_jni_project_folder' на реальный путь
        path: your_jni_project_folder/libs/armeabi-v7a/libsampvoice.so
